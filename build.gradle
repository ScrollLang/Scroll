import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
  apply from: 'dependencies.gradle'
}

plugins {
	id 'com.gradleup.shadow' version '8.3.3'
	id 'fabric-loom' version '1.8.7'
	id 'maven-publish'
	id 'java'
}

compileTestJava.options.encoding = 'UTF-8'
compileJava.options.encoding = 'UTF-8'

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven {
		url = 'https://maven.fabricmc.net'
	}
	maven {
		url = 'https://maven.pkg.github.com/ScrollLang/skript-parser'
		credentials {
			username = System.getenv("PACKAGES_USER") ?: project.findProperty("scrollUsername")
			password = System.getenv("PACKAGES_KEY") ?: project.findProperty("scrollPassword")
		}
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		scroll {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {

	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Adventure API
	modImplementation include("net.kyori:adventure-platform-fabric:${project.adventure_version}")

	// Reflections
	modImplementation include("org.reflections:reflections:${project.reflections_version}")
	modImplementation include("org.javassist:javassist:${project.javassist_version}")

	// TOML
	modImplementation include("org.tomlj:tomlj:${project.toml_version}")
	modImplementation include("org.antlr:antlr4-runtime:${project.antlr_version}")

	// skript-parser
	modImplementation include("org.scrolllang:skript-parser:${project.skript_parser_version}")

}

publishing {
	repositories {
		maven {
			name = 'Scroll'
			url = 'https://maven.pkg.github.com/ScrollLang/Scroll'
			credentials {
				username = System.getenv("PACKAGES_USER") ?: project.findProperty("scrollUsername")
				password = System.getenv("PACKAGES_KEY") ?: project.findProperty("scrollPassword")
			}
		}
		publications {
			gpr(MavenPublication) {
				from(components.java)
				version = project.version
				groupId = 'org.scrolllang'
				def releases = 'scroll' // Don't modify
				def snapshots = 'scroll-dev' // Don't modify
				artifactId = version.contains('dev') ? snapshots : releases
			}
		}
	}
}

processResources {
	inputs.property 'version', project.version
	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

tasks.build.doFirst {
	def versionFile = file('VERSION')
	versionFile.text = project.version
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from('LICENSE') {
		rename {
			"${it}_${project.base.archivesName.get()}"
		}
	}
}

processResources {
	filter ReplaceTokens, tokens: ["version": project.property("version")]
}

shadowJar {
	minimize()
}
