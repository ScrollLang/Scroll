import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
	id 'java'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
}

loom {
	splitEnvironmentSourceSets()

	mods {
		scroll {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {

	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Adventure API
	modImplementation include("net.kyori:adventure-platform-fabric:5.9.0")

	// Reflections
	modImplementation include('org.reflections:reflections:0.10.2')
	modImplementation include('org.javassist:javassist:3.30.1-GA')

	// TOML
	modImplementation include('org.tomlj:tomlj:1.1.0')
	modImplementation include('org.antlr:antlr4-runtime:4.13.1')

	// skript-parser
	implementation include(project(':skript-parser'))
	//clientImplementation project(':skript-parser').sourceSets.client.output

}

publishing {
    repositories {
        maven {
            name = "scroll-lang"
            url = "https://maven.pkg.github.com/ScrollLang/Scroll"
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("scroll-lang.username")
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("scroll-lang.token")
            }
        }
    }
}

processResources {
	inputs.property 'version', project.version
	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from('LICENSE') {
		rename {
			"${it}_${project.base.archivesName.get()}"
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

processResources {
	filter ReplaceTokens, tokens: ["version": project.property("version")]
}
